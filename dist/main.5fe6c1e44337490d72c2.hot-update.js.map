{"version":3,"file":"main.5fe6c1e44337490d72c2.hot-update.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;ACrCA","sources":["webpack://adiba-central/./node_modules/@manaflair/redux-batch/build/core/index.js","webpack://adiba-central/./node_modules/@manaflair/redux-batch/build/core/reduxBatch.js","webpack://adiba-central/./node_modules/@manaflair/redux-batch/index.js","webpack://adiba-central/./src/redux/store.js","webpack://adiba-central/webpack/runtime/getFullHash"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _reduxBatch = require('./reduxBatch');\n\nObject.defineProperty(exports, 'reduxBatch', {\n  enumerable: true,\n  get: function get() {\n    return _reduxBatch.reduxBatch;\n  }\n});","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.reduxBatch = reduxBatch;\nfunction reduxBatch(next) {\n\n    var nextListeners = [];\n    var currentListeners = undefined;\n\n    function ensureCanMutateNextListeners() {\n\n        if (nextListeners === currentListeners) {\n            nextListeners = nextListeners.slice();\n        }\n    }\n\n    function subscribe(listener) {\n\n        if (typeof listener !== \"function\") throw new Error(\"Invalid listener, expected a function\");\n\n        var isSubscribed = true;\n\n        ensureCanMutateNextListeners();\n        nextListeners.push(listener);\n\n        return function unsubscribe() {\n\n            if (!isSubscribed) return;\n\n            ensureCanMutateNextListeners();\n            nextListeners.splice(nextListeners.indexOf(listener), 1);\n\n            isSubscribed = false;\n        };\n    }\n\n    function notifyListeners() {\n\n        var listeners = nextListeners;\n\n        for (var t = 0; t < listeners.length; ++t) {\n            currentListeners = listeners;\n            listeners[t]();\n        }\n    }\n\n    return function () {\n\n        var store = next.apply(undefined, arguments);\n\n        var receivedNotification = false;\n        var inDispatch = false;\n\n        function dispatchRecurse(action) {\n\n            return Array.isArray(action) ? action.map(function (subAction) {\n                return dispatchRecurse(subAction);\n            }) : store.dispatch(action);\n        }\n\n        function dispatch(action) {\n\n            var reentrant = inDispatch;\n\n            if (!reentrant) {\n                receivedNotification = false;\n                inDispatch = true;\n            }\n\n            var result = dispatchRecurse(action);\n            var requiresNotification = receivedNotification && !reentrant;\n\n            if (!reentrant) {\n                receivedNotification = false;\n                inDispatch = false;\n            }\n\n            if (requiresNotification) notifyListeners();\n\n            return result;\n        }\n\n        store.subscribe(function () {\n\n            if (inDispatch) {\n                receivedNotification = true;\n            } else {\n                notifyListeners();\n            }\n        });\n\n        return Object.assign({}, store, {\n            dispatch: dispatch, subscribe: subscribe\n        });\n    };\n}","module.exports = require('./build/core');\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { reduxBatch } from \"@manaflair/redux-batch\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport { rootReducer, rootSaga } from \"./rootReducer\";\r\n// import logger from \"redux-logger\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    immutableCheck: false,\r\n    serializableCheck: false,\r\n    thunk: true,\r\n  }),\r\n  sagaMiddleware,\r\n  // logger\r\n];\r\n\r\n// if (process.env.NODE_ENV !== 'production') {\r\n//   middleware.push(logger);\r\n// }\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  enhancers: [reduxBatch],\r\n});\r\n\r\n/**\r\n * @see https://github.com/rt2zz/redux-persist#persiststorestore-config-callback\r\n * @see https://github.com/rt2zz/redux-persist#persistor-object\r\n */\r\nexport const persistor = persistStore(store);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","__webpack_require__.h = () => (\"7dd470c323f929213f05\")"],"names":[],"sourceRoot":""}
{"version":3,"file":"main.0a072fa0de0da6c00c44.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;;;;;;;;ACrCA","sources":["webpack://adiba-central/./src/index.tsx","webpack://adiba-central/./src/redux/store.ts","webpack://adiba-central/webpack/runtime/getFullHash"],"sourcesContent":["import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { createInstance, Piral, createStandardApi } from \"piral\";\n\nimport { setupShell } from \"./_app/app\";\nimport { createPageLayoutsApi } from \"piral-page-layouts\";\nimport { errors, layout } from \"./_app/shared/components/layouts/default\";\nimport Landing from \"./landing\";\nimport { Provider } from \"react-redux\";\n// import { store } from \"./reduxsss/store\";\nimport store, { persistor } from \"./redux/store\";\nimport * as _redux from \"./redux\";\nimport axios from \"axios\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\n// change to your feed URL here (either using feed.piral.cloud or your own service)\nconst feedUrl = \"https://feed.piral.cloud/api/v1/pilet/empty\";\n\nexport const instance = createInstance({\n  state: {\n    components: layout,\n    errorComponents: errors,\n    // routes: {\n    //   \"/\": Landing,\n    // },\n  },\n  plugins: [...createStandardApi(), createPageLayoutsApi()],\n  requestPilets() {\n    return fetch(feedUrl)\n      .then((res) => res.json())\n      .then((res) => res.items);\n  },\n});\n\nsetupShell(instance.root);\n\n_redux.mockAxios(axios, store);\n\nconst root = createRoot(document.querySelector(\"#app\"));\nroot.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <Piral instance={instance} />\n    </PersistGate>\n  </Provider>\n);\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { reduxBatch } from \"@manaflair/redux-batch\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport { rootReducer, rootSaga } from \"./rootReducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    immutableCheck: false,\r\n    serializableCheck: false,\r\n    thunk: true,\r\n  }),\r\n  sagaMiddleware,\r\n  logger,\r\n];\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  middleware.push(logger);\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: true,\r\n  enhancers: [reduxBatch],\r\n});\r\n\r\n/**\r\n * @see https://github.com/rt2zz/redux-persist#persiststorestore-config-callback\r\n * @see https://github.com/rt2zz/redux-persist#persistor-object\r\n */\r\nexport const persistor = persistStore(store);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","__webpack_require__.h = () => (\"f9625a8913b2d2f0f20f\")"],"names":[],"sourceRoot":""}
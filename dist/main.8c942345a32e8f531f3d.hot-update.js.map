{"version":3,"file":"main.8c942345a32e8f531f3d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAHA;AAAA;AAKA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAMA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAOA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAMA;AAAA;AAEA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;;AACA;AAIA;AAAA;AAaA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AASA;AAEA;;;;;;;;AC/OA","sources":["webpack://adiba-central/./src/member/forms/SignInContent.tsx","webpack://adiba-central/webpack/runtime/getFullHash"],"sourcesContent":["import * as React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"../../redux/hook\";\n// import UserMgtViewModel from \"../../_app/shared/ViewModels/UserMgtViewModel\";\nimport { logins } from \"../redux/_redux/authCrud\";\nimport * as auth from \"../redux/_redux/authRedux\";\nimport { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport * as Yup from \"yup\";\n\ninterface SignInViewModel {\n  email: string;\n  password: string;\n}\n\nconst initialValues: SignInViewModel = {\n  email: \"\",\n  password: \"\",\n};\n\nexport default function SignInContent() {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Wrong email format\")\n      .min(3, \"Minimum 3 symbols\")\n      .max(50, \"Maximum 50 symbols\")\n      .required(\"AUTH.VALIDATION.REQUIRED_FIELD\"),\n    password: Yup.string()\n      .min(3, \"Minimum 3 symbols\")\n      .max(50, \"Maximum 50 symbols\")\n      .required(\"AUTH.VALIDATION.REQUIRED_FIELD\"),\n  });\n\n  const enableLoading = () => {\n    setLoading(true);\n  };\n\n  const disableLoading = () => {\n    setLoading(false);\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: LoginSchema,\n    onSubmit: (values, { setStatus, setSubmitting }) => {\n      enableLoading();\n      setStatus(\"\");\n      logins({ email: values.email, password: values.password })\n        .then((response) => {\n          disableLoading();\n          setSubmitting(false);\n          var data = response.data;\n          if (response.status === 200) {\n            dispatch(auth.actions.login(data));\n            history.push(\"/dashboard\");\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n  });\n\n  const [viewModel, setViewModel] = React.useState<SignInViewModel>({\n    email: \"\",\n    password: \"\",\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setViewModel({\n      ...viewModel,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { email, password } = viewModel;\n\n    logins({ email: email, password: password })\n      .then((response) => {\n        var data = response.data;\n        if (response.status === 200) {\n          dispatch(auth.actions.login(data));\n          history.push(\"/dashboard\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    // const data = { email, password };\n    // const clientsViewModelsInstance = new UserMgtViewModel(\"signin\");\n    // const signIn = clientsViewModelsInstance.signIn(data);\n    // signIn.then((response: any) => {\n    //   if (response.status == 200) {\n    //     location.href = \"/\";\n    //   } else {\n    //     location.href = \".\";\n    //   }\n    // });\n  };\n\n  return (\n    <div className='mt-8 sm:mx-auto sm:w-full sm:max-w-md'>\n      <div className='bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10'>\n        <form\n          className='space-y-6'\n          action='#'\n          method='POST'\n          // onSubmit={handleSubmit}\n          onSubmit={formik.handleSubmit}\n        >\n          {formik.status ? (\n            <div className='mb-10 alert alert-custom alert-light-danger alert-dismissible'>\n              <div className='alert-text font-weight-bold'>{formik.status}</div>\n            </div>\n          ) : null}\n\n          <div>\n            <label\n              htmlFor='email'\n              className='block text-sm font-medium text-gray-700'\n            >\n              Email address\n            </label>\n            <div className='mt-1'>\n              <input\n                id='email'\n                // onChange={handleChange}\n                name='email'\n                type='email'\n                autoComplete='email'\n                className='block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm'\n                {...formik.getFieldProps(\"email\")}\n              />\n            </div>\n            {formik.touched.email && formik.errors.email ? (\n              <div className='fv-plugins-message-container'>\n                <div className='fv-help-block'>{formik.errors.email}</div>\n              </div>\n            ) : null}\n          </div>\n\n          <div>\n            <label\n              htmlFor='password'\n              className='block text-sm font-medium text-gray-700'\n            >\n              Password\n            </label>\n            <div className='mt-1'>\n              <input\n                id='password'\n                // onChange={handleChange}\n                name='password'\n                type='password'\n                autoComplete='current-password'\n                className='block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm'\n                {...formik.getFieldProps(\"password\")}\n              />\n            </div>\n            {formik.touched.password && formik.errors.password ? (\n              <div className='fv-plugins-message-container'>\n                <div className='fv-help-block'>{formik.errors.password}</div>\n              </div>\n            ) : null}\n          </div>\n\n          <div className='flex items-center justify-between'>\n            <div className='flex items-center'>\n              <input\n                id='remember-me'\n                name='remember-me'\n                type='checkbox'\n                className='h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500'\n              />\n              <label\n                htmlFor='remember-me'\n                className='ml-2 block text-sm text-gray-900'\n              >\n                Remember me\n              </label>\n            </div>\n\n            <div className='text-sm'>\n              <Link\n                to='/forgetpassword'\n                className='font-medium text-indigo-600 hover:text-indigo-500'\n              >\n                Forgot your password?\n              </Link>\n            </div>\n          </div>\n\n          <div>\n            <button\n              id='kt_login_signin_submit'\n              type='submit'\n              disabled={formik.isSubmitting}\n              className='flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm'\n              style={{\n                width: \"-webkit-fill-available\",\n              }}\n            >\n              <span>Login</span>\n              {loading && (\n                <span className='ml-3 spinner spinner-white'>...</span>\n              )}\n            </button>\n\n            {/* <button\n              type='submit'\n              className='flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2'\n            >\n              Sign in\n            </button> */}\n          </div>\n        </form>\n\n        <div className='mt-6 flex items-center justify-between'>\n          <div className='text-sm'>\n            <Link\n              to='/sign-up'\n              className='font-medium text-indigo-600 hover:text-indigo-500'\n            >\n              Not yet registered? Enroll\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// export default connect(null, auth.actions)(SignInContent);\n","__webpack_require__.h = () => (\"545e598ecf468d0f5f38\")"],"names":[],"sourceRoot":""}
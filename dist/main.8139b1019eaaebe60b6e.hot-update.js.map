{"version":3,"file":"main.8139b1019eaaebe60b6e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAgBA;AAGA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAAA;AAGA;AAIA;AAGA;AAAA;AAAA;AAEA;AAAA;AACA;AAGA;AAGA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAEA;AAAA;AACA;AAGA;AAGA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAEA;AAAA;AACA;AAGA;AAGA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAYA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAYA;AAAA;AACA;AAAA;AAIA;;;;;;;;ACpKA","sources":["webpack://adiba-central/./src/_app/shared/member/UserWizard.tsx","webpack://adiba-central/webpack/runtime/getFullHash"],"sourcesContent":["import * as React from \"react\";\n// import stepss from '../stepss';\nimport { classNames } from \"../utils/className\";\nimport { CheckIcon } from \"@heroicons/react/24/solid\";\n\ninterface stepsList {\n  id: string;\n  name?: string;\n  description?: string;\n  href?: string;\n  status?: string;\n}\n\ninterface UserWizardProps {\n  content?: React.ReactNode;\n  steps: stepsList;\n  handleSwitch: Function;\n}\n\nexport default function UserWizard(\n  props: React.PropsWithChildren<UserWizardProps>\n) {\n  const { content, steps, handleSwitch } = props;\n\n  return (\n    <>\n      <div className='mt-8 lg:border-t lg:border-b lg:border-gray-200'>\n        <nav\n          className='mx-auto max-w-7xl px-4 sm:px-6 lg:px-8'\n          aria-label='Progress'\n        >\n          <ol className='overflow-hidden rounded-md lg:flex lg:rounded-none lg:border-l lg:border-r lg:border-gray-200'>\n            {/* {stepss.map((steps, stepsIdx) => ( */}\n            <li\n              key={steps.id}\n              className='relative overflow-hidden lg:flex-1'\n              onClick={handleSwitch(steps.id)}\n            >\n              <div\n                className={classNames(\n                  parseInt(steps.id) === 1 ? \"border-b-0 rounded-t-md\" : \"\",\n                  steps === steps.length - 1 ? \"border-t-0 rounded-b-md\" : \"\",\n                  \"border border-gray-200 overflow-hidden lg:border-0\"\n                )}\n              >\n                {steps.status === \"complete\" ? (\n                  <a href={steps.href} className='group'>\n                    <span\n                      className='absolute top-0 left-0 h-full w-1 bg-transparent group-hover:bg-gray-200 lg:bottom-0 lg:top-auto lg:h-1 lg:w-full'\n                      aria-hidden='true'\n                    />\n                    <span\n                      className={classNames(\n                        parseInt(steps.id) !== 1 ? \"lg:pl-9\" : \"\",\n                        \"px-6 py-5 flex items-start text-sm font-medium\"\n                      )}\n                    >\n                      <span className='flex-shrink-0'>\n                        <span className='flex h-10 w-10 items-center justify-center rounded-full bg-indigo-600'>\n                          <CheckIcon\n                            className='h-6 w-6 text-white'\n                            aria-hidden='true'\n                          />\n                        </span>\n                      </span>\n                      <span className='mt-0.5 ml-4 flex min-w-0 flex-col'>\n                        <span className='text-sm font-medium'>\n                          {steps.name}\n                        </span>\n                        <span className='text-sm font-medium text-gray-500'>\n                          {steps.description}\n                        </span>\n                      </span>\n                    </span>\n                  </a>\n                ) : steps.status === \"current\" ? (\n                  <a href={steps.href} aria-current='steps'>\n                    <span\n                      className='absolute top-0 left-0 h-full w-1 bg-indigo-600 lg:bottom-0 lg:top-auto lg:h-1 lg:w-full'\n                      aria-hidden='true'\n                    />\n                    <span\n                      className={classNames(\n                        parseInt(steps.id) !== 1 ? \"lg:pl-9\" : \"\",\n                        \"px-6 py-5 flex items-start text-sm font-medium\"\n                      )}\n                    >\n                      <span className='flex-shrink-0'>\n                        <span className='flex h-10 w-10 items-center justify-center rounded-full border-2 border-indigo-600'>\n                          <span className='text-indigo-600'>{steps.id}</span>\n                        </span>\n                      </span>\n                      <span className='mt-0.5 ml-4 flex min-w-0 flex-col'>\n                        <span className='text-sm font-medium text-indigo-600'>\n                          {steps.name}\n                        </span>\n                        <span className='text-sm font-medium text-gray-500'>\n                          {steps.description}\n                        </span>\n                      </span>\n                    </span>\n                  </a>\n                ) : (\n                  <a href={steps.href} className='group'>\n                    <span\n                      className='absolute top-0 left-0 h-full w-1 bg-transparent group-hover:bg-gray-200 lg:bottom-0 lg:top-auto lg:h-1 lg:w-full'\n                      aria-hidden='true'\n                    />\n                    <span\n                      className={classNames(\n                        parseInt(steps.id) !== 1 ? \"lg:pl-9\" : \"\",\n                        \"px-6 py-5 flex items-start text-sm font-medium\"\n                      )}\n                    >\n                      <span className='flex-shrink-0'>\n                        <span className='flex h-10 w-10 items-center justify-center rounded-full border-2 border-gray-300'>\n                          <span className='text-gray-500'>{steps.id}</span>\n                        </span>\n                      </span>\n                      <span className='mt-0.5 ml-4 flex min-w-0 flex-col'>\n                        <span className='text-sm font-medium text-gray-500'>\n                          {steps.name}\n                        </span>\n                        <span className='text-sm font-medium text-gray-500'>\n                          {steps.description}\n                        </span>\n                      </span>\n                    </span>\n                  </a>\n                )}\n\n                {parseInt(steps.id) !== 1 ? (\n                  <>\n                    {/* Separator */}\n                    <div\n                      className='absolute inset-0 top-0 left-0 hidden w-3 lg:block'\n                      aria-hidden='true'\n                    >\n                      <svg\n                        className='h-full w-full text-gray-300'\n                        viewBox='0 0 12 82'\n                        fill='none'\n                        preserveAspectRatio='none'\n                      >\n                        <path\n                          d='M0.5 0V31L10.5 41L0.5 51V82'\n                          stroke='currentcolor'\n                          vectorEffect='non-scaling-stroke'\n                        />\n                      </svg>\n                    </div>\n                  </>\n                ) : null}\n              </div>\n            </li>\n            {/* ))} */}\n          </ol>\n        </nav>\n      </div>\n      <div className='mt-8 sm:mx-auto'>\n        <div className='sm:min-w-[80rem]'>{content}</div>\n      </div>\n    </>\n  );\n}\n","__webpack_require__.h = () => (\"6840ac7c436ddeacc9be\")"],"names":[],"sourceRoot":""}
{"version":3,"file":"main.ecaa94d308b9605a5d66.hot-update.js","mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;;;;;;;;;;;;;;;;;;;AChDA","sources":["webpack://adiba-central/./node_modules/axios-auth-refresh/dist/index.min.js","webpack://adiba-central/./src/redux/setupAxios.js","webpack://adiba-central/webpack/runtime/getFullHash"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"axios\")):\"function\"==typeof define&&define.amd?define([\"axios\"],t):\"object\"==typeof exports?exports[\"axios-auth-refresh\"]=t(require(\"axios\")):e[\"axios-auth-refresh\"]=t(e.axios)}(this,(function(e){return function(){\"use strict\";var t={593:function(e,t,r){Object.defineProperty(t,\"__esModule\",{value:!0}),t.resendFailedRequest=t.getRetryInstance=t.unsetCache=t.createRequestQueueInterceptor=t.createRefreshCall=t.shouldInterceptError=t.mergeOptions=t.defaultOptions=void 0;const s=r(300);t.defaultOptions={statusCodes:[401],pauseInstanceWhileRefreshing:!1},t.mergeOptions=function(e,t){return Object.assign(Object.assign(Object.assign({},e),{pauseInstanceWhileRefreshing:t.skipWhileRefreshing}),t)},t.shouldInterceptError=function(e,t,r,s){var n,o;return!!e&&(!(null===(n=e.config)||void 0===n?void 0:n.skipAuthRefresh)&&(!!(t.interceptNetworkError&&!e.response&&0===e.request.status||e.response&&((null==t?void 0:t.shouldRefresh)?t.shouldRefresh(e):null===(o=t.statusCodes)||void 0===o?void 0:o.includes(parseInt(e.response.status))))&&(e.response||(e.response={config:e.config}),!t.pauseInstanceWhileRefreshing||!s.skipInstances.includes(r))))},t.createRefreshCall=function(e,t,r){return r.refreshCall||(r.refreshCall=t(e),\"function\"==typeof r.refreshCall.then)?r.refreshCall:(console.warn(\"axios-auth-refresh requires `refreshTokenCall` to return a promise.\"),Promise.reject())},t.createRequestQueueInterceptor=function(e,t,r){return void 0===t.requestQueueInterceptorId&&(t.requestQueueInterceptorId=e.interceptors.request.use((e=>t.refreshCall.catch((()=>{throw new s.default.Cancel(\"Request call failed\")})).then((()=>r.onRetry?r.onRetry(e):e))))),t.requestQueueInterceptorId},t.unsetCache=function(e,t){e.interceptors.request.eject(t.requestQueueInterceptorId),t.requestQueueInterceptorId=void 0,t.refreshCall=void 0,t.skipInstances=t.skipInstances.filter((t=>t!==e))},t.getRetryInstance=function(e,t){return t.retryInstance||e},t.resendFailedRequest=function(e,t){return e.config.skipAuthRefresh=!0,t(e.response.config)}},300:function(t){t.exports=e}},r={};function s(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={exports:{}};return t[e](o,o.exports,s),o.exports}var n={};return function(){var e=n;Object.defineProperty(e,\"__esModule\",{value:!0});const t=s(593);e.default=function(e,r,s={}){if(\"function\"!=typeof r)throw new Error(\"axios-auth-refresh requires `refreshAuthCall` to be a function that returns a promise.\");const n={skipInstances:[],refreshCall:void 0,requestQueueInterceptorId:void 0};return e.interceptors.response.use((e=>e),(o=>{if(s=(0,t.mergeOptions)(t.defaultOptions,s),!(0,t.shouldInterceptError)(o,s,e,n))return Promise.reject(o);s.pauseInstanceWhileRefreshing&&n.skipInstances.push(e);const u=(0,t.createRefreshCall)(o,r,n);return(0,t.createRequestQueueInterceptor)(e,n,s),u.catch((e=>Promise.reject(e))).then((()=>(0,t.resendFailedRequest)(o,(0,t.getRetryInstance)(e,s)))).finally((()=>(0,t.unsetCache)(e,n)))}))}}(),n}()}));","// import { refresh_token } from \"../app/modules/Auth/_redux/authCrud\";\r\n// import * as auth_actions from \"../app/modules/Auth/_redux/authRedux\";\r\nimport { refresh_token } from \"../member/redux/_redux/authCrud\";\r\nimport * as auth_actions from \"../member/redux/_redux/authRedux\";\r\n\r\n// import { AxiosAuthRefreshRequestConfig } from \"axios-auth-refresh\";\r\nimport createAuthRefreshInterceptor from \"axios-auth-refresh\";\r\n\r\n// Function that will be called to refresh authorization\r\n\r\nexport default function setupAxios(axios, store) {\r\n  const refreshAuthLogic = (failedRequest) =>\r\n    refresh_token()\r\n      .then((response) => {\r\n        var data = response.data;\r\n        if (data.status === \"Success\") {\r\n          store.dispatch(\r\n            auth_actions.actions.fulfillToken(data.data.access_token)\r\n          );\r\n          failedRequest.response.config.headers[\"Authorization\"] =\r\n            \"Bearer \" + data.data.access_token;\r\n          return Promise.resolve();\r\n        }\r\n        return Promise.resolve();\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Refresh token error\", error);\r\n        store.dispatch(auth_actions.actions.logout());\r\n        return Promise.reject(error);\r\n      });\r\n\r\n  axios.interceptors.request.use(\r\n    (config) => {\r\n      const {\r\n        auth: { authToken },\r\n      } = store.getState();\r\n\r\n      console.log(\"Auth token\", authToken);\r\n\r\n      if (authToken) {\r\n        config.headers.Authorization = `Bearer ${authToken}`;\r\n      }\r\n      return config;\r\n    },\r\n    (err) => Promise.reject(err)\r\n  );\r\n\r\n  createAuthRefreshInterceptor(axios, refreshAuthLogic);\r\n}\r\n","__webpack_require__.h = () => (\"65ca52e5ec97c13d1f82\")"],"names":[],"sourceRoot":""}
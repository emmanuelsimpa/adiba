{"version":3,"file":"main.d89ad42362500de4bc43.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAGA;AAAA;AAEA;AAGA;AAAA;AAOA;AAKA;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAGA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAGA;AAAA;AAcA;;;;;;;;ACzGA","sources":["webpack://adiba-central/./src/_app/shared/Feed.tsx","webpack://adiba-central/./src/_app/shared/SlideOver.tsx","webpack://adiba-central/webpack/runtime/getFullHash"],"sourcesContent":["import * as React from 'react'\nimport { Fragment } from 'react'\nimport { ChatBubbleLeftEllipsisIcon, TagIcon, UserCircleIcon } from '@heroicons/react/20/solid'\nimport { classNames } from '../utils/className'\nimport FeedViewModel from './ViewModels/FeedViewModel'\n\n\nexport default function Feed() {\n  const [activity, setActivity] = React.useState([])\n    React.useEffect(() => {\n        const feedViewModelsInstance = new FeedViewModel('feed')\n        const listTable = feedViewModelsInstance.list()\n        listTable\n          .then((response: any) => response.json())\n          .then((data: any) => setActivity(data));\n      }, []);\n  return (\n    <div className=\"flow-root\">\n      <ul className=\"-mb-8\">\n        {activity.map((activityItem, activityItemIdx) => (\n          <li key={activityItem.id}>\n            <div className=\"relative pb-8\">\n              {activityItemIdx !== activity.length - 1 ? (\n                <span className=\"absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200\" aria-hidden=\"true\" />\n              ) : null}\n              <div className=\"relative flex items-start space-x-3\">\n                {activityItem.type === 'comment' ? (\n                  <>\n                    <div className=\"relative\">\n                      <img\n                        className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white\"\n                        src={activityItem.imageUrl}\n                        alt=\"\"\n                      />\n\n                      <span className=\"absolute -bottom-0.5 -right-1 rounded-tl bg-white px-0.5 py-px\">\n                        <ChatBubbleLeftEllipsisIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n                      </span>\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <div>\n                        <div className=\"text-sm\">\n                          <a href={activityItem.person.href} className=\"font-medium text-gray-900\">\n                            {activityItem.person.name}\n                          </a>\n                        </div>\n                        <p className=\"mt-0.5 text-sm text-gray-500\">Commented {activityItem.date}</p>\n                      </div>\n                      <div className=\"mt-2 text-sm text-gray-700\">\n                        <p>{activityItem.comment}</p>\n                      </div>\n                    </div>\n                  </>\n                ) : activityItem.type === 'assignment' ? (\n                  <>\n                    <div>\n                      <div className=\"relative px-1\">\n                        <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white\">\n                          <UserCircleIcon className=\"h-5 w-5 text-gray-500\" aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"min-w-0 flex-1 py-1.5\">\n                      <div className=\"text-sm text-gray-500\">\n                        <a href={activityItem.person.href} className=\"font-medium text-gray-900\">\n                          {activityItem.person.name}\n                        </a>{' '}\n                        assigned{' '}\n                        <a href={activityItem.assigned ? activityItem.assigned.href : '#'} className=\"font-medium text-gray-900\">\n                          {activityItem.assigned? activityItem.assigned.name : ''}\n                        </a>{' '}\n                        <span className=\"whitespace-nowrap\">{activityItem.date}</span>\n                      </div>\n                    </div>\n                  </>\n                ) : activityItem.type === 'tags' ? (\n                  <>\n                    <div>\n                      <div className=\"relative px-1\">\n                        <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white\">\n                          <TagIcon className=\"h-5 w-5 text-gray-500\" aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"min-w-0 flex-1 py-0\">\n                      <div className=\"text-sm leading-8 text-gray-500\">\n                        <span className=\"mr-0.5\">\n                          <a href={activityItem.person.href} className=\"font-medium text-gray-900\">\n                            {activityItem.person.name}\n                          </a>{' '}\n                          added tags\n                        </span>{' '}\n                        <span className=\"mr-0.5\">\n                          {activityItem.tags ? activityItem.tags.map((tag) => (\n                            <Fragment key={tag.name}>\n                              <a\n                                href={tag.href}\n                                className=\"relative inline-flex items-center rounded-full border border-gray-300 px-3 py-0.5 text-sm\"\n                              >\n                                <span className=\"absolute flex flex-shrink-0 items-center justify-center\">\n                                  <span\n                                    className={classNames(tag.color, 'h-1.5 w-1.5 rounded-full')}\n                                    aria-hidden=\"true\"\n                                  />\n                                </span>\n                                <span className=\"ml-3.5 font-medium text-gray-900\">{tag.name}</span>\n                              </a>{' '}\n                            </Fragment>\n                          )) : ''}\n                        </span>\n                        <span className=\"whitespace-nowrap\">{activityItem.date}</span>\n                      </div>\n                    </div>\n                  </>\n                ) : null}\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}","import * as React from \"react\";\nimport { Fragment } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { XMarkIcon } from \"@heroicons/react/24/outline\";\nimport Feed from \"./Feed\";\nimport Profile from \"./Profile\";\nimport FeedStandardList from \"./FeedStandardList\";\n\ninterface MobileSidebarProps {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  content: string;\n}\n\nconst slideOverContents = [\n  {\n    name: \"messages\",\n    component: <FeedStandardList />,\n  },\n  {\n    name: \"notifications\",\n    component: <Feed />,\n  },\n  {\n    name: \"profile\",\n    component: <Profile />,\n  },\n];\n\nexport default function SlideOver(\n  props: React.PropsWithChildren<MobileSidebarProps>\n) {\n  const { open, setOpen, content } = props;\n\n  return (\n    <Transition.Root show={open} as={Fragment}>\n      <Dialog as='div' className='relative z-10' onClose={setOpen}>\n        <Transition.Child\n          as={Fragment}\n          enter='ease-in-out duration-500'\n          enterFrom='opacity-0'\n          enterTo='opacity-100'\n          leave='ease-in-out duration-500'\n          leaveFrom='opacity-100'\n          leaveTo='opacity-0'\n        >\n          <div className='fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity' />\n        </Transition.Child>\n\n        <div className='fixed inset-0 overflow-hidden'>\n          <div className='absolute inset-0 overflow-hidden'>\n            <div className='pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10'>\n              <Transition.Child\n                as={Fragment}\n                enter='transform transition ease-in-out duration-500 sm:duration-700'\n                enterFrom='translate-x-full'\n                enterTo='translate-x-0'\n                leave='transform transition ease-in-out duration-500 sm:duration-700'\n                leaveFrom='translate-x-0'\n                leaveTo='translate-x-full'\n              >\n                <Dialog.Panel className='pointer-events-auto relative w-screen max-w-md'>\n                  <Transition.Child\n                    as={Fragment}\n                    enter='ease-in-out duration-500'\n                    enterFrom='opacity-0'\n                    enterTo='opacity-100'\n                    leave='ease-in-out duration-500'\n                    leaveFrom='opacity-100'\n                    leaveTo='opacity-0'\n                  >\n                    <div className='absolute top-0 left-0 -ml-8 flex pt-4 pr-2 sm:-ml-10 sm:pr-4'>\n                      <button\n                        type='button'\n                        className='rounded-md text-gray-300 hover:text-white focus:outline-none focus:ring-2 focus:ring-white'\n                        onClick={() => setOpen(false)}\n                      >\n                        <span className='sr-only'>Close panel</span>\n                        <XMarkIcon className='h-6 w-6' aria-hidden='true' />\n                      </button>\n                    </div>\n                  </Transition.Child>\n                  <div className='flex h-full flex-col overflow-y-scroll bg-white py-6 shadow-xl'>\n                    <div className='px-4 sm:px-6'>\n                      <Dialog.Title className='text-lg font-medium text-gray-900'>\n                        Panel title\n                      </Dialog.Title>\n                    </div>\n                    <div className='relative mt-6 flex-1 px-4 sm:px-6'>\n                      {/* Replace with your content */}\n                      {\n                        slideOverContents.find((item) => item.name === content)\n                          ?.component\n                      }\n                      {/* /End replace */}\n                    </div>\n                  </div>\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n}\n","__webpack_require__.h = () => (\"28daaab69f3860b3a092\")"],"names":[],"sourceRoot":""}